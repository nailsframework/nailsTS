import { RenderingEngine } from './engine';
import { ComponentEngine } from './componentEngine';
import { Injector } from './core/injector';
import { IActiveElement } from './interfaces/ActiveElement';
import { ActiveElement } from './classes/ActiveElement';
import { Router } from './coreComponents/router.component';
export declare class State {
    instance: State;
    data: any;
    activeElements: IActiveElement[];
    activeDirectiveElements: IActiveElement[];
    engine: RenderingEngine;
    disabledElements: ActiveElement[];
    componentEngine: ComponentEngine;
    injector: Injector;
    element: string;
    methods: any;
    components: any;
    mountedComponents: any;
    router: Router;
    injectors: any[];
    getInstance(): State;
    constructor();
    addInjector(injector: Injector): void;
    addActiveDirectiveElement(key: string, statement: string, element: HTMLElement): void;
    updateElementRefByObject(object: Object, ref: HTMLElement): void;
    addActiveElement(ref: HTMLElement, object: any, content: string, interpolation: string): void;
    findElementByRef(ref: HTMLElement): IActiveElement;
    getHtmlReferenceOfStateElement(element: ActiveElement): any;
    stripAndTrimInterpolation(interpolation: string): string;
    disableElementIfNeeded(element: HTMLElement): void;
    findElementsByObject(obj: any, prop: string): IActiveElement[];
}
