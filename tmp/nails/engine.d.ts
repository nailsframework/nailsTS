import { NailsDirectives } from './directiveDefinitions';
import { State } from './state';
import { ActiveElement } from './classes/ActiveElement';
export declare class RenderingEngine {
    state: State;
    directives: NailsDirectives;
    constructor(state: State);
    indexDOM(): void;
    insert(index: number, string: string, ref: string): string;
    setTitle(): void;
    elementCanGetAttribute(element: HTMLElement): boolean;
    isNForActivated(element: HTMLElement): boolean;
    disableInterpolationForVariableNameOnElement(name: string, element: HTMLElement): void;
    getElementDerrivedObject(element: HTMLElement): string;
    getElementDerrivedProperty(element: HTMLElement): string;
    getForArrayByStatement(statement: string): string;
    isForAttribute(element: ActiveElement): boolean;
    isActiveElement(element: HTMLElement): boolean;
    removePrefix(directive: string): string;
    prefixDiretive(directive: string): string;
    getElementDirectives(element: HTMLElement): string[];
    indexElement(element: HTMLElement): any[];
    getElementAttributeForDirective(element: HTMLElement, directive: string): string;
    executeDirectivesOnElement(element: HTMLElement, add: Boolean): void;
    stripAndTrimNForInterpolation(interpolation: string): string;
    getNForInterpolations(content: string): string[];
    getNForInterpolation(interpolation: string): string;
    getValueOfInterpolation(interpolation: string): any;
    removeWhiteSpaceFromString(str: string): string;
    stripAndTrimInterpolation(interpolation: string): string;
    getInterpolationsForTextContent(text: string): string[];
    getObjectReferenceByInterpolationName(interpolation: string): any;
    interpolateOnTextWithState(text: string, state: State): void;
    getContentOfNodeIfTextNodeExists(node: Node): string;
    setContentOfTextNode(node: Node, value: string): boolean;
    updateInterpolatedElement(ref: HTMLElement, originalText: string): void;
    isDescendant(parent: HTMLElement, child: HTMLElement): boolean;
    isElementDisabled(name: string, element: HTMLElement): boolean;
    interpolateElement(element: HTMLElement, interpolations: string[]): HTMLElement;
    nodeHasTextNodeAsAChild(element: HTMLElement): boolean;
    nodeHasTextNodeAsADirectChild(element: HTMLElement): boolean;
    isTextNode(element: Node): boolean;
    sanitize(string: string): string;
    executeInerpolationsOnElement(element: HTMLElement): void;
}
